# PHP
## An OOP approach.


PHP5 – Object Orienting Programming

Object Basics

Classes and objects
Classes is a code template used to generate objects. An object is data that has been structured according to the template defined in the class.
class ShopProduct {
//class body, add properties and methods
}
Objects :
$product1 = new ShopProduct();
$product2 = new ShopProduct();
Constructor methods 
Primitive and class types
Inheritance
Inheritance : a class can be derived from a base class.
Defining the problem: we might have shop products slightly differents: books, cds. All have an author, date, price properties. Books have  no. of pages, cds have play length and corresponding getters. 
A solution would be to create a composite class that contains all in once. The problem would result is: complexity + mess. Another solution : separate ShopProduct class in BookProduct and CDProduct. The problem would be duplication + redundancy of methods.
The best solution is creating a base parent class ShopProduct and 2 extended (child) class: CdProduct and Book Product:
class ShopProduct {…}
class CdProduct extends ShopProduct{...}
class BookProduct extends ShopProduct {…}

Constructors in inheritance. 
When you define a constructor in a child class you pass arguments to the parrent. If you fail, this will result in a partially constructed object.
class ShopProduct {
__construct() {...}
}

class BookProduct extends ShopProduct {
__construct() {
parent::__construct() ;
}
}
class CdProduct extends ShopProduct {
__construct() {
parent::__construct() ;
}
}
::  - invoke a method from the parent class thus avoiding duplication.

e.g.
function getSumaryLine() {
$base = parent :: getSummeryLine()
$base .=  ..add child class specific code
}

Visibility
Public  - accesible from anywhere
private – accesible from enclosing class only
protected – accesible from enclosing class + subclass (child class)

It's a good idea to deny access to properties providing methods that relay the needed values : getters + setters = accessors.

Bibliography 
Zandstra, Matt – PHP5 Objects, Patterns, and Practices.

Dependency Injection.
-------------------------------------------------------------------------------------------------
Design pattern. Turn procedural code into loosely coupled classes called services, that can be swapped out and used standalone.
Ease the testing.

Example.
User class storing the actual user data. Session Storage class storing the actual state of preferences between 2 requests.
User needs storage class: The usual way: you instantiate the session storage in the User constructor. Easy to use but harder to customize.
With dependency injection: you instantiate the session storage outside the user class, assign to a variable then inject into the user. Easy to customize, slightly harder to use.

https://amsterdam2014.drupal.org/session/dependency-injection




Codesniffer

$ phpcs --standard=drupal --extensions='php,module,inc,install,test,profile,theme,js,css,info,txt' ./sites/all/modules/enrd/features/

